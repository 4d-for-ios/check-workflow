#!/bin/sh

DIR="./sdk"
if [ ! -d "$DIR" ]; then
  exit 0
fi

TMP="${TMPDIR}"
if [ "x$TMP" = "x" ]; then
  TMP="/tmp/"
fi
TMP="${TMP}checksdk.$$"
rm -rf "$TMP" || true
mkdir "$TMP"
if [ $? -ne 0 ]; then
  echo "failed to mkdir $TMP" >&2
  exit 1
fi

status=0
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

for archive in $DIR/*
do
    if [[ -f $archive ]]; then
      if [ ${archive: -4} == ".zip" ]; then
          filename=$(basename -- "$archive")

          unzip -q $archive -d $TMP/

          # // Generated by Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
          versionLine=$(cat $TMP/Carthage/Build/iOS/$filename.framework/Headers/$filename-Swift.h | grep "Generated by Apple Swift version" | head -1)

          version=$(echo $versionLine |sed -n 's/.*by Apple Swift version \(.*\) (.*/\1/p')


          if [ -z "$1" ]
          then
            echo $filename"="$version
          else
            vercomp "$1" $version
            case $? in
              0) op='=';;
              1) op='>';;
              2) op='<';;
            esac
            if [[ $op == ">" ]]
            then
                echo "ðŸš«: $filename Expected '$1>=' but '$version'"
                status=$((status+1))
            else
                echo "âœ…: $filename '$1 $op $version'"
            fi
          fi
      fi
    fi
done

#open "$TMP"
rm -rf "$TMP"

exit $status
